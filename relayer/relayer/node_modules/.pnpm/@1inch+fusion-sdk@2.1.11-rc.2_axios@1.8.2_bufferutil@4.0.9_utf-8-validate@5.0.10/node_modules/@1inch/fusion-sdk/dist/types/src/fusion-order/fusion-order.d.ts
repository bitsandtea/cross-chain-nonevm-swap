import { AuctionCalculator } from '.pnpm/@1inch+fusion-sdk@2.1.11-rc.2_axios@1.8.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@1inch/fusion-sdk/dist/types/src/auction-calculator';
import { AuctionDetails } from '.pnpm/@1inch+fusion-sdk@2.1.11-rc.2_axios@1.8.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@1inch/fusion-sdk/dist/types/src/fusion-order/auction-details';
import { FusionExtension } from '.pnpm/@1inch+fusion-sdk@2.1.11-rc.2_axios@1.8.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@1inch/fusion-sdk/dist/types/src/fusion-order/fusion-extension';
import { AuctionWhitelistItem, IntegratorFee, SettlementPostInteractionData } from '.pnpm/@1inch+fusion-sdk@2.1.11-rc.2_axios@1.8.2_bufferutil@4.0.9_utf-8-validate@5.0.10/node_modules/@1inch/fusion-sdk/dist/types/src/fusion-order/settlement-post-interaction-data';
import { Address, EIP712TypedData, Extension, LimitOrderV4Struct, OrderInfoData } from '@1inch/limit-order-sdk';
export declare class FusionOrder {
    readonly settlementExtensionContract: Address;
    private static _ORDER_FEE_BASE_POINTS;
    private static defaultExtra;
    readonly fusionExtension: FusionExtension;
    private inner;
    protected constructor(settlementExtensionContract: Address, orderInfo: OrderInfoData, auctionDetails: AuctionDetails, postInteractionData: SettlementPostInteractionData, extra?: {
        unwrapWETH?: boolean;
        nonce?: bigint;
        permit?: string;
        allowPartialFills?: boolean;
        allowMultipleFills?: boolean;
        orderExpirationDelay?: bigint;
        enablePermit2?: boolean;
        source?: string;
    }, extension?: FusionExtension);
    get extension(): Extension;
    get maker(): Address;
    get takerAsset(): Address;
    get makerAsset(): Address;
    get takingAmount(): bigint;
    get makingAmount(): bigint;
    get receiver(): Address;
    get deadline(): bigint;
    get auctionStartTime(): bigint;
    get auctionEndTime(): bigint;
    get isBitInvalidatorMode(): boolean;
    get partialFillAllowed(): boolean;
    get multipleFillsAllowed(): boolean;
    get nonce(): bigint;
    get salt(): bigint;
    static new(settlementExtension: Address, orderInfo: OrderInfoData, details: {
        auction: AuctionDetails;
        fees?: {
            integratorFee?: IntegratorFee;
            bankFee?: bigint;
        };
        whitelist: AuctionWhitelistItem[];
        resolvingStartTime?: bigint;
    }, extra?: {
        unwrapWETH?: boolean;
        nonce?: bigint;
        permit?: string;
        allowPartialFills?: boolean;
        allowMultipleFills?: boolean;
        orderExpirationDelay?: bigint;
        enablePermit2?: boolean;
        source?: string;
    }): FusionOrder;
    static fromDataAndExtension(order: LimitOrderV4Struct, extension: Extension): FusionOrder;
    build(): LimitOrderV4Struct;
    getOrderHash(chainId: number): string;
    getTypedData(chainId: number): EIP712TypedData;
    getCalculator(): AuctionCalculator;
    calcTakingAmount(makingAmount: bigint, time: bigint, blockBaseFee?: bigint): bigint;
    canExecuteAt(executor: Address, executionTime: bigint): boolean;
    isExpiredAt(time: bigint): boolean;
    getResolverFee(filledMakingAmount: bigint): bigint;
    isExclusiveResolver(wallet: Address): boolean;
    isExclusivityPeriod(time?: bigint): boolean;
}
