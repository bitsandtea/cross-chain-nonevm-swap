import type { FallbackMode } from '.pnpm/next@15.4.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/lib/fallback';
import type { Params } from '.pnpm/next@15.4.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/request/params';
type StaticPrerenderedRoute = {
    readonly params: Params;
    readonly pathname: string;
    readonly encodedPathname: string;
    readonly fallbackRouteParams: undefined;
    readonly fallbackMode: FallbackMode | undefined;
    readonly fallbackRootParams: undefined;
    /**
     * When enabled, the route will be rendered with diagnostics enabled which
     * will error the build if the route that is generated is empty.
     */
    throwOnEmptyStaticShell: undefined;
};
type FallbackPrerenderedRoute = {
    readonly params: Params;
    readonly pathname: string;
    readonly encodedPathname: string;
    readonly fallbackRouteParams: readonly string[];
    readonly fallbackMode: FallbackMode | undefined;
    readonly fallbackRootParams: readonly string[];
    /**
     * When enabled, the route will be rendered with diagnostics enabled which
     * will error the build if the route that is generated is empty.
     */
    throwOnEmptyStaticShell: boolean;
};
export type PrerenderedRoute = StaticPrerenderedRoute | FallbackPrerenderedRoute;
export type StaticPathsResult = {
    fallbackMode: FallbackMode | undefined;
    prerenderedRoutes: PrerenderedRoute[] | undefined;
};
export { };

