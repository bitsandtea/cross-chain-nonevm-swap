import type { PageExtensions } from '.pnpm/next@15.4.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/page-extensions-type';
import type { CollectedMetadata, ModuleTuple } from '.pnpm/next@15.4.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/webpack/loaders/metadata/types';
import type { NextConfig } from '.pnpm/next@15.4.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/config-shared';
import { type ValueOf } from '.pnpm/next@15.4.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/shared/lib/constants';
import type webpack from 'next/dist/compiled/webpack/webpack';
export type AppLoaderOptions = {
    name: string;
    page: string;
    pagePath: string;
    appDir: string;
    appPaths: readonly string[] | null;
    preferredRegion: string | string[] | undefined;
    pageExtensions: PageExtensions;
    assetPrefix: string;
    rootDir?: string;
    tsconfigPath?: string;
    isDev?: true;
    basePath: string;
    nextConfigOutput?: NextConfig['output'];
    middlewareConfig: string;
    isGlobalNotFoundEnabled: true | undefined;
};
type AppLoader = webpack.LoaderDefinitionFunction<AppLoaderOptions>;
declare const FILE_TYPES: {
    readonly 'not-found': "not-found";
    readonly forbidden: "forbidden";
    readonly unauthorized: "unauthorized";
    readonly layout: "layout";
    readonly template: "template";
    readonly error: "error";
    readonly loading: "loading";
    readonly 'global-error': "global-error";
    readonly 'global-not-found': "global-not-found";
};
export type MetadataResolver = (dir: string, filename: string, extensions: readonly string[]) => Promise<string | undefined>;
export type AppDirModules = {
    readonly [moduleKey in ValueOf<typeof FILE_TYPES>]?: ModuleTuple;
} & {
    readonly page?: ModuleTuple;
} & {
    readonly metadata?: CollectedMetadata;
} & {
    readonly defaultPage?: ModuleTuple;
};
declare const nextAppLoader: AppLoader;
export default nextAppLoader;
